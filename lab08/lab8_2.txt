Explain:

1. Explain the component structure of the application. What makes the UI composable and why does this matter?

	Our application has several custom React components: the CommentBox, the CommentList, the CommentForm 
	and the Comment component itself. The CommentBox is composed of the CommentList and the CommentForm. 
	Finally the CommentList is composed of multiple Comment components.

	User Interfaces tend to lend themselves towards componentization since they're often designed to look to the
	viewer as individual components which you can click on or type in. React allows us a programmers to keep
	these functionally separate components separate even at the code-level. One aspect of React that enables this
	is that the JSX code that renders the component isn't designed as a full fledged html document with all the 
	necessary <head>/<body> tags that are necessary - but just the barebones needed for that component. This allows
	that component to be placed inside of other components, since they're all just fancy divs.

	The advantage of composition here is that the web is able to rediscover many of the benefits of the
	encapsulation provided by the object-oriented paradigm. Components can be designed and tested separately from
	the other components (and potentially the developers working on them), they can more easily be re-used, etc.



2. Explain what JSX does.

	JSX is a xml-like definition of what we want the React component to look like that is compiled to the
	somewhat more odious React functions like React.createElement that are needed to manipulate the virtual DOM.

	It's a simple, declaritive way of defining the layout that is familiar enough to HTML that non-technical
	designers can often still understand/manipulate it. Also, since it's not confined to traditional HTML tags,
	we're able to use any React components that are already defined or custom components that we've created ourselves.


3. Explain why ReactJS is safe with respect to XSS.

	ReactJS is protected against common HTML injection since we're never creating the raw HTML string ourselves,
	but letting React do that for us.


4. Explain how the data flows through the components. How are comments loaded? created? saved.

	Data only ever flows down from "parent" component to "child", passed in via props properties. 
	The majority of the state is read in from the "database" and stored in the CommentBox component 
	and passed down to CommentList and the individual Comments via this.props. 

	The creation and saving of new comments created by the user is still done at the CommentBox level
	since the flow of data only ever goes downwards, however, the CommentForm instigates the change at
	the CommentBox level by calling a method on CommentBox that was passed down via this.props.
	Because fucntions are closures in Javasript, the variables in CommentBox that were accessible when 
	the function was created, are still accessible when the function is later called by the CommentForm
	despite the change of context.


5. Explain the nature and purpose of props and state. Which is immutable and which is mutable and why does this distinction matter?

	State is mutable and is meant to always be the definitive source of truth for that data.
	Props are immutable and are reflections of the state in higher-tiered objects.

	This provides a centralized source for where the data is stored and updated (in the state), 
	and provides a reliable mechanism to propagate that information (and any changes to the information) 
	through the entire web-page.

Consider the following, more detailed questions based on statements in the tutorial.

6. Try editing the comments.json file (to add or remove a legal comment). What happens and why?

	Removing a comment from the json file is automagically updated in the browser without even needing to refresh 
	the page. This happens because the CommentBox is calling loadCommentsFromServer() every 2000 milliseconds 
	(this.props.pollInterval).


7. When the CommentBox has loaded comments from the server (in loadCommentsFromServer()), why doesn’t it call render() to make them visible?

	It doesn't need to since all the objects are always being re-rendered / reflashed in the virtual DOM.


8. Of what advantage, if any, is it to require that components always represent the current state of the view?

	If there was a little bit of lag as components took their own sweet time to update to a change in data,
	some portions of the website might be inconsistent creating an undesirable user experience. Similarly,
	without a unified repository for truth, I could see a design in which the CommentBox and CommentsList are both watching the CommentForm
	for any changes in such a way that potentially two occurrences of a new comment could be created depending on 
	sequencing. Putting all the data in one spot just seems like a simpler design, which often seems to be 
	preferable to a more complex rats nest of dependencies.

9. The app implements optimistic updates. Isn’t optimism here more like foolishness? What if the server rejects the new comment (for whatever reason)?

	While I suppose there is the potential that the server would reject the comment, it doesn't appear that that would
	be a significant problem since the app would update quickly enough anyways if it were rejected. The erroneous
	comment would only occur momentarily, depending on how recently we'd queried the server.
	However, waiting the couple of seconds to update the server and then query the server might take longer than
	the user might expect it would have to.
	If the comment was rejected, it wouldn't be the end of the world if it appeared on the web-page momentarily.
	We could popup a message explaining why the comment was rejected, etc.
	If it took a couple of seconds to load the comment however, the user might worry about the quality of the web
	page or whether or not they had made a mistake.
	Personally, I would rather there be a moment of inaccuracy rather than a moment of panic or frustration.